Twelve-Factor App (https://12factor.net/pt_br)
	- Base de Código
		- repositório com controle de versão
		- Uma base de código com rastreamento utilizando controle de revisão, muitos deploys
	- Dependências
		- Declare e isole as dependências (maven)
	- Configurações
		- Armazene as configurações no ambiente (variaveis de ambiente)
	- Serviços de Apoio
		- Trate os serviços de apoio, como recursos ligados 
		- serviços externos: banco de dados, filas ..
		- serviços acessíveis por URL sem distinção
	- Construa, lance, execute
		- Separe estritamente os builds e execute em estágios
	- Processos
		- Execute a aplicação como um ou mais processos que não armazenam estado
		- estados independente do ambiente que a aplicação esta rodando
	- Vínculo de porta
		- Exporte serviços por ligação de porta
		- cada aplicação tem uma porta
	- Concorrência
		- Dimensione por um modelo de processo
	- Descartabilidade
		- Maximizar a robustez com inicialização e desligamento rápido
	- Dev/prod semelhantes
		- Mantenha o desenvolvimento, teste, produção o mais semelhante possível
	- Logs
		- Trate logs como fluxo de eventos
	- Processos de Admin
		- Executar tarefas de administração/gerenciamento como processos pontuais
		- migração de dados (flyway)
		
on premisse - nós somos responsáveis pela infraestrutura (CPDs) 
cloud - nuvem (toda a infraestrutura é de responsabilidade de uma empresa especializada)

serviços - digital ocean, AWS, Heroku e Pivotal Web Services

ao criar um bucket da amazon s3 pode selecionar copiar de outro bucket

cli do cloud foundry
	- cf help
	- cf login
	- cf create-space production
	- cf target -s production
	- cf cups algafood-log-service -p "token"
	- cf services
	- cf cups algafood-s3-service -p "access-key-id,secret-access-key,bucket,directory,region"

jar - arquivo gerado ao final a ser executado pela JVM
war - é um jar com estrutura diferente para ser conhecido pelos servelet containers
fat jar - é um jar que nao depende de mais nada para ser executado (contem o tomcat)

gerar fat jar -> ./mvnw clean package

enviar arquivo para deploy
	- mudar versão do java -> criar arquivo manifest-production.yml
	- fazer deploy -> cf push algafood-prod -p target/algafood-api-0.0.1-SNAPSHOT.jar -f manifest-production.yml --no-start

fazer bind dos services -> cf bind-service algafood-prod algafood-s3-service (ou cf bs)
visualizar logs -> cf logs algafood-prod --recent
visualizar variaveis de ambiente -> cf env algafood-prod 

realizar unbind do serviço -> cf unbind-service algafood-prod algafood-sendgrid
criar serviço para sendgrid -> cf cups algafood-mail-service -p "hostname,port,username,password"
fazer bind dos services -> cf bs algafood-prod algafood-mail-service
republicar aplicação -> cf restage algafood-prod





