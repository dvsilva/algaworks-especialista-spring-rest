pool de conexões 
- é um componente de software que mantem um conjunto de conexões com o banco de dados para reutilização na aplicação
- uma mesma conexão é utilizada diversas vezes em momentos diferentes 
- reduz o tempo gasto na abertura e fechamento das conexões
- criação de conexão com banco de dados é um processo custoso

- aplicação sem pool (requisição -> aplicação web -> banco de dados) - cria uma nova conexão a cada requisição e fecha ao finalizar
- aplicação com pool (requisição -> aplicação web -> poll (tanque / depósito) -> banco de dados) 

- idle (ociosa) - ao criar e quando ficar sem utilizar. ao finalizar a requisição volta para o estado de idle
- se tiver requisição a mais do máximo de conexões do pool a aplicação coloca em uma fila
- ao ficar menos do minimo, geralmente mantem as conexões por um periodo de tempo ao passar fecha as conexões

- reduz o tempo que o consumidor da api deve esperar para ser respondido por uma requisição
- otimiza o uso das conexões com o banco de dados sem ter que gastar um tempo com abertura e fechamento de conexões

Spring e Hikari -> cria 10 conexões no pool
Apache Bench -> ferramenta para testes de desempenho
ab [-n numero de requisicoes] [-c quantas requisicoes concorrentes] [url] 
ab -n 6 -c 2 api.algafood.local:8080/restaurantes -> 2 requisições concorresntes que da 3 vezes
 
 schema generator
 - create deleta as tabelas e os dados não seria uma boa
 - update atualiza as tabelas porem mudança no nome das colunas ou tipos não são refletidas pois o hibernate nao tem autonomia para isso
 - mudanças como exclusão de colunas antigas e a criação de novas com o mesmo nome não são feitas
 - é util para testes e prototipação
 - em produção melhor gerenciar os esquemas com scripts de migração incrementais
 
 versionamento de schemas de banco de dados
 - amadores
 	- feito de forma manual
 	- tem que saber a ordem exata dos scripts e não esquecer de nenhum
 	- muitos desenvolvedores criando scripts
 - profissionais
 	- atribui versionamento aos scripts
 	- toda alteração gera uma versão
 	- evolução do banco de dados é incremental
 	- nunca mexe na estrutura do banco de dados sem criar um script de migração
 	- flyway cria uma tabela de histórico de migrações

# criando migração a partir de DDL gerado por schema generation
spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/ddl.sql

# inserir dados de testes quando subir a app
spring.flyway.locations=classpath:db/migration,classpath:db/testdata

roollback do flyway por cmd -> mwnw flyway:repair -Dflyway.configFiles=src/main/resources/flyway.properties
 