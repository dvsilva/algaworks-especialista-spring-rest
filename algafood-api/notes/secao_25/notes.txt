serviços de deploy (PASS)
	- Cloud Foundry (https://www.cloudfoundry.org)
	- Heroku (https://www.heroku.com)
	- Digital Ocean (https://www.digitalocean.com)
	- Microsoft Azure (https://azure.microsoft.com/pt-br)
	- Google Cloud (https://cloud.google.com)
	- Alibaba Cloud (https://www.alibabacloud.com)
	- Amazon Web Services (https://aws.amazon.com/pt)

Quadrante Mágico de 2020 do Gartner 
https://pages.awscloud.com/GLOBAL-multi-DL-gartner-mq-cips-2020-learn.html

conhecendo AWS
	- Amazon Web Services (AWS) (https://aws.amazon.com/pt)
	- Infraestrutura global da AWS (https://aws.amazon.com/pt/about-aws/global-infrastructure)
	- Nível gratuito da AWS (https://aws.amazon.com/pt/free/?all-free-tier.sort-by=item.additionalFields.SortRank&all-free-tier.sort-order=asc)
	
conceitos fundamentais da nuvem da AWS
	- região -> localização geográfica totalmente separada (locais onde estão os serviços)
		- diminuir latência dos usuários
		- prevenção de desastres
	- zonas de disponibilidade -> datacenter separado dentro da região
		- alta conectividade (max 100km de raio)
		- proteção (incêndios ..)
		
- nuvem da aws
	- região
		- zonas de disponibilidade
		- vpc  
			- rede virtual isolada logicamente dentro da nuvem da amazon
			- abrange todas as zonas de disponibilidade que estão dentro da região
			- subnet
				- esta ligada a uma unica zona de disponibilidade
				 - multi AZ -> multi zona de disponibilidade (distribui)

monitorando e criando um alerta de orçamento da AWS
	- menu principal > nome do usuário > My Billing Dashboard
		- ativar avisos -> preferencias > preferencias de faturamento (ativar caixas de notificações)
		- criar um orçamento -> budgets > criar um orçamento > orçamento de custos > configurar limites > confirmar orçamento > criar

 criando o bucket no Amazon S3
 	criar bucket
		- criar um bucket dvsilva-algafood-production
		- leste EUA (us-east1)
		- desmarcar bloquear todo o acesso público
		- habilitar acesso publico 
			- permissões > Lista de controle de acesso (ACL) > Todos (acesso público) > Listar (marcar Compreendo os efeitos dessas alterações em meus objetos e buckets)
		- criar pasta catalogo

	criar acesso via IAM (IAM policy)
	- Anexar políticas existentes de forma direta
		- criar uma política
		- adicionar serviço s3
		- nivel de acesso: gravação (Put Object e Delete Object) gerenciamento de permissões (PutObjectAcl e PutObjectVersionAcl)
		- recursos, adicionar ARM: colocar nome do bucket e em object name deixar como qualquer (*)
		- nomear política como: AlgaFoodProduction_GravacaoFotosS3
		- criar política
		
	- adicionar um novo usuário
		- marcar Acesso programático
		- Anexar políticas existentes de forma direta "AlgaFoodProduction_GravacaoFotosS3" ao usuário
		- cliar em próximo, próximo, criar (copiar id chave de acesso e chave de acesso secreta)
	
	criar chave de acesso (no usuario clicar em Credenciais de segurança)
	- no usuario, ver Credenciais de segurança
	- Criar chave de acesso, copiar dados para outro lugar pois não é possível obter os dados depois que fechar

criando uma instância do MySQL no Amazon RDS
	- RDS > Databases > Create database
	- Standard create > MYSQL > versão 8.0.20 > templates Free tier
	- nome: algafood-mysql > Master username: admin > Master password: colocar_senha
	- Connectivity > Public access > Yes (habilitar acesso externo)
	- VPC security group > create new > New VPC security group name: algafood-mysql-sg (firewall virtual)
	- as demais manter > create database

editar VPC 
	- Your VPCs > botao editar na tabela > nome: algafood-vpc
	- SECURITY > Security Groups > algafood-mysql-sg > Edit inbound rules > editar para myip quando necessário

- criar banco de dados algafood e usuario algafood-api na aws 
- conceder acesso total ao usuario algafood-api no banco algafood

opções para redis na nuvem
https://aws.amazon.com/pt/elasticache
https://redislabs.com/

redislabs
	- criar e ativar conta
	- criar subscription > aws > us-east-1 (mesma região dos demais serviços)
	- selecionar "replication (optional)" > selecionar plano free 30MB > nome: AlgaFood
	- Create Database > Database Name: algafood-redis > copiar senha
	- Data Eviction Policy > volatile-lru (remover as menos recentemente usadas)
	- as demais manter > activate
	- testar acesso 
		- docker container run --rm -it redis:6.0.10-alpine redis-cli -h [host] -p [port]
		- auth [senha] 
		- keys * / set nome Thiago / get nome / del nome 

deploy em containers docker
	 - Amazon Elastic Compute Cloud (EC2) (https://aws.amazon.com/pt/ec2)
	 - Amazon Elastic Kubernetes Service (EKS) (https://aws.amazon.com/pt/eks)
	 - Amazon Elastic Container Service (ECS) (https://aws.amazon.com/pt/ecs)
	 - AWS Fargate (https://aws.amazon.com/pt/fargate)

publicando um container no Amazon ECS
	- ECS > Task Definition > Create new Task Definition
	- Fargate > Next step > Task Definition Name: nginx-taskdef
	- Task size > Task memory (GB): 0.5GB > Task CPU (vCPU): 0.25
	- Add container > Container name: nginx-container > Image: nginx:1.19.8-alpine > Port mappings: 80 > create

criar cluster
	- ECS > cluster > Create Cluster > Networking only > Cluster name: algafood-cluster
	
rodar a task
	- dentro do cluster > Tasks > Run New Task (melhor não rodar, mas usar um service)

rodar service
	- dentro do cluster > Services > 
	- Launch type: FARGATE > Service name: nginx-sevice > Number of tasks: 1 > Next step
	- selecionar vpc e subnet > Security groups: nginx-sg > next step > next step > create service > view service
	- para evitar cobranças -> selecionar o service > update > Number of tasks: 0 > next step > next step > Update 
	
subindo a imagem Docker para o Amazon Elastic Container Registry (ECR)
	- AWS CLI (https://aws.amazon.com/pt/cli)
	- Amazon Elastic Container Registry (ECR) (https://aws.amazon.com/pt/ecr)

criando um repositório
	- Amazon ECR > Repositories > Create repository > Repository name: algafood-api > create repository
	- visualizar comandos para enviar imagens: view push commands

baixar aws cli

realizar envio para repositório na amazon
	- criar novo usuario
		- IAM > usuários > adicionar usuario
		- Nome de usuário: danyllo-awscli > Acesso programático
		- Anexar políticas existentes de forma direta > AmazonEC2ContainerRegistryPowerUser 
		- proximo > proximo > criar usuário
	- aws configure
		- informar access key id e secret access key (deixar outras opções em branco)
	- fazer envio da imagem (view push commands)
		- fazer login -> aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin [url registry]
		- fazer build da api -> ./mvnw package -Pdocker
		- fazer tag da imagem -> docker tag algafood-api:latest [url registry]/algafood-api:latest
		- fazer push -> docker push [url registry]/algafood-api:latest
	
preparar variáveis de ambiente

Gerando um arquivo JKS com um par de chaves
	- "C:\Program Files\Java\jdk1.8.0_221\bin\keytool.exe" -genkeypair -alias algafood -keyalg RSA -keypass 123@algafoodprod -keystore algafood-prod.jks -storepass 123@algafoodprod -validity 3650
	- keytool -genkeypair -alias algafood -keyalg RSA -keypass 123@algafoodprod -keystore algafood-prod.jks -storepass 123@algafoodprod -validity 3650
Codificando o conteúdo do arquivo JKS em Base64
	- cat algafood-prod.jks | base64
Alternativa para codificar conteúdo de arquivo em Base64
	- https://www.base64encode.org/

AWS Systems Manager Parameter Store (gerenciar propriedades em prod)
	- AWS Systems Manager > Gerenciamento de aplicativos > Armazém de parâmetros > criar todos os parametros da app
	
publicando a app
	- ECS > Task Definition > Create new Task Definition
	- Fargate > Next step > Task Definition Name: algafood-api-taskdef
	- Task size > Task memory (GB): 1GB > Task CPU (vCPU): 0.5
	- Add container > Container name: algafood-api-container > Image: [url registry]/algafood-api  > Port mappings: 8080 > adicionar variáveis de ambiente > add > create

criar cluster (se nao tiver sido criado)
	- ECS > cluster > Create Cluster > Networking only > Cluster name: algafood-cluster
	
rodar service
	- dentro do cluster > Services > 
	- Launch type: FARGATE > Service name: algafood-api-sevice > Number of tasks: 1 > Next step
	- selecionar vpc e subnet > Security groups: algafood-api-service-sg > Inbound rules: type "custom tcp" e port range "8080" > next step > next step > create service > view service
	- para evitar cobranças -> selecionar o service > update > Number of tasks: 0 > next step > next step > Update 

permitindo a leitura de parâmetros
	- IAM > roles > ECSTaskExecutionRole > add inline policy > Serviço: Systems Manager
	- em leitura (GetParameter, GetParameters e GetParametersByPath)
	- em recursos > Específico > Adicionar ARN > região: "qualquer" e Fully qualified parameter name: "prod/*" > revisar politica
	- Nome: ParameterStoreReadOnly > criar política

permitindo o acesso ao MySQL
	- vpc > SECURITY > security groups > algafood-mysql-sg > Edit inbound rules > add rule > type: "Mysql/Aurora" e source "algafood-api-service" > save rules
	
balanceamento de carga
	- Amazon Elastic Load Balancing (https://aws.amazon.com/pt/elasticloadbalancing)
	- distribuir o processamento das requisições para diversos containers
	- em zonas de disponibilidade diferentes
	- listener (rules), target group (health check) e container (target)
	
configurando e provisionando um Load Balancer
	- EC2 > Balanceamento de carga > Load balancers
	- create load balancer > selecionar "Application Load Balancer"
	- nome: "algafood-lb", esquema: "voltado para Internet", listeners: "80"
	- Zonas de disponibilidade: "us-east-1a" e "us-east-1b" > next > next
	- criar um novo grupo de segurança > nome: algafood-lb-sg > next
	- configurar roteamento > nome: algafood-api-service-tg, tipo destino: "IP"
	- verificações de integridade > healthcheck: "/v1, Limite íntegro e Limite não íntegro: 2, Tempo limite: 10
	- next > next > create
	
configurando o balanceamento de carga
	- ECS > dentro do cluster > Services > 
	- Launch type: FARGATE > Service name: algafood-api-sevice > Number of tasks: 2 > Next step
	- selecionar vpc e duas subnets ("us-east-1a" e "us-east-1b") > Security groups selecionar algafood-api-service-sg 
		- se for criar um novo: Inbound rules: type "custom tcp" e port range "8080"
	- selecionar load balancing: Application Load Balancer
	- health check grace period (periodo para restart): 150
	- selecionar load balancer (algafood-lb)
	- Container to load balance > add to load balancer
		- Production listener port: 80
		- Target group name: algafood-api-service-tg
	- next step > next step > create service > view service

desabilitando acesso direto para as apis
	- VPC > Security > Security Groups > algafood-api-service-sg > Edit inbound rules
	- Source > tirar o 0.0.0.0 e colocar algafood-lb

