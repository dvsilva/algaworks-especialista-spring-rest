o que é REST
- REpresentational State Transfer
- é um modelo arquitetural, não é uma tecnologia (não é possível baixar em um site)
- REST é uma especificaçao que define a forma de comunicação de componentes de software na web
- independente da linguagem de programação utilizada
- é um estilo arquitetural para desenvolvimento de webservices
- surgiu no inicio dos anos 2000, tese de phd, roy fielding
- formalização de melhores praticas (constraints) e regras para desenvolvimento de web APIs (webservices)

porque rest? 

- separação entre cliente e servidor
- maior flexibilidade e portabilidade
- cliente pode evoluir independente do servidor
- os sistemas podem ser gerenciados por equipes de empresas diferentes
- escalabilidade
- independente de linguagem de programação
- APIs podem interagir entre si e ser consumidas por sistemas internos e externos
- simplicidade na criação e consumo de APIs (simples e intuitivo de utilizar)
- mercado (empresas demandam)

constraints (melhores praticas) - devemos nos esforçar mas acabamos violando essas regras em favor da praticidade
- cliente-servidor 
	- precisa de um cliente enviando requisições para um servidor
	- devem poder evoluir independente uma da outra
	- podem ser substutuido desde que a interface entre elas permaneça inalterada
- stateless
	- sem estado
	- aplicação não deve possuir estado (inspirada no HTTP)
	- a requisição deve conter tudo que precisa para seja devidamente processada
	- o servidor não pode manter uma sessão (informações contextuais sobre o cliente)
	- cada requisição é vista como um cliente diferente
- cache
	- pode fazer caching das respostas das requisições
	- serviços que não tem muita alteração dos dados (consulta das cidades)
	- faz requisição uma unica vez e api diz que a resposta deve ser cacheada onde o cliente guarda os dados em um cache interno
	- quando o cliente faz novamente, antes de receber a requisição o cache entra em ação e nao chega a consumir rede
	- servidores intermediarios com caching (proxy) - melhora escalabilidade e performance, diminui hits/acessos no servidor
	- nao deve adicionar cache em toda a aplicação, usar quando necessário 
- interface uniforme
	- conjunto de operações bem definidas do sistema
	- uma vez definida a interface deve seguir religiosamente 
	- simplifica e desacopla a arquitetura, permite que cada parte evolua independente
	- identificar coisas por URIs e usando padrão do protocolo de comunicação para interagir com a API (verbos)
	- adicionar links na resposta (HATEOAS)
	- resposta deve ser padronizada
	- API deve ser desenvolvida utilizando os verbos HTTP corretamente, de forma que a interface seja utilizada como um contrato
	- de forma que o cliente e servidor podem se comunicar de forma mais previsível
	- adicionando links nos recursos e devolvendo uma resposta com informações padronizadas
- sistema em camadas
	- possibilidade entre cliente-servidor ter outros servidores
	- podem fornecer segurança, caching, balanceamento de carga, etc
	- não deve afetar a requisição do cliente e a resposta do servidor
	- cliente não deve conhecer quantas camadas possui no meio (ele é agnostico a isso)
- código sob demanda (opcional e pouco usada)
	- o servidor pode enviar como resposta de uma requisição um código que pode ser executado no cliente

diferença entre REST e RESTful
- REST é o estilo arquitetural, é a especificação
- RESTful API é uma API desenvolvida em conformidade com as contraints
	- segue todas as constraints obrigatórias religiosamente
	- dificilmente, nem todas APIs que dizem ser RESTful são porque violam alguma contraint
	- tem diferentes aplicações ("verdadeiramente RESTful" quando está 100% em conformidade)
	- muito usado para APIs que não são RESTful

puristas x pragmáticos (desenvolvedores de REST APIs)
	- puristas 
		- defendem que REST APIs devem seguir fielmente os principios REST sem exceções
		- se roy fielding disse tem que ser
	- pragmáticos 
		- abordagens mais praticas, seguem as contraints mas estao abertos a exceções
		- se ve que a constraint religiosamente vai complicar muito, preferem abrir mão  de ser 100% RESTful para tornar o desenvolvimento ou uso da API mais simples
		
protocolo HTTP
- modelo arquitetural REST independe de linguagem e tecnologia e não restringe ao uso de um protocolo particular
- para colocar em pratica precisa de um, o mais comum é o HTTP
- HTTP (protocolo requisição - resposta [constraint cliente-servidor]
	- requisição (método, URI, versão do protocolo, cabeçalhos e corpo)
		- método - verbo indica a ação que deseja ser executada (GET, POST, PUT E DELETE)
		- URI - caminho que identifica o que nós queremos dentro do servidor HTTP
		- versão - mais comum a versão 1.1
		- cabeçalhos 
			- informações sobre a requisição 
			- chave-valor para ser usado pelo servidor para interpretar a requisiçao e executar a operação
			- content-type e accept
		- corpo - não é obrigatório, depende do método, é onde enviamos os dados do cliente para o servidor
	- resposta (versão do protocolo, status, cabeçalhos e corpo)
		- status - descreve o resultado do processamento da requisição
		
usando o protocolo HTTP
	- telnet www.uol.com.br 80
	- telnet www.uol.com.br 443 [erro]
	
para rodar utilizar https://gnutls.org
/d/Downloads/Programas/gnutls/bin/gnutls-cli.exe www.uol.com.br

GET / HTTP/1.1
Host: www.uol.com.br
Accept: text/html

/d/Downloads/Programas/gnutls/bin/gnutls-cli.exe api.github.com

GET /users/algaworks/repos HTTP/1.1
Host: api.github.com
Accept: application/json
User-Agent: ESR

clients de REST APIs
https://www.postman.com/
https://insomnia.rest/

recursos REST
- resources -> é qualquer coisa exposta na web (documento, pagina, vídeo, imagem ou processo de negócio)
- é algo que tem importancia suficiente para ser referenciado como uma coisa no software
- ex: catálogo de produtos, nota fiscal, pagamento
- a forma de um cliente interagir com a API é através de seus resources
- paralelo com orientação a objetos - um recurso é uma instancia de um objeto de determinado tipo
- um único produto é um recurso - singleton resource
- coleção de produtos é um recurso - collection resource

identificando recursos
- URI (Uniform Resorce Identifier) - é um conjunto de caracteres que dão uma espécie de endereço para os recursos de forma não ambigua
- URL (Uniform Resorce Locator) - é um tipo de URI / tipo de identificação de recurso não apenas o identificador mas a localização do recurso (onde esta e qual o mecanismo ate chegar a ele [procolo https])
- não usar verbos e sim substantivos na URI variando os métodos HTTP

representações de recursos 
- código que descreve o estado atual dos recursos
content negociation (negociação de conteúdo)
- requisição cabeçalho adicionar accept: application/json (JSON, XML, JPG ..)

métodos/verbos http
- possui a semantica da operação a ser efetuada sobre um determinado recurso
- atraves do método diz qual ação queremos executar em um determinado recurso identificado pela URI

indepotencia
- capacidade de ser aplicado mais de uma vez sem que o resultado da primeira aplicação mude
- ex: preço da maça e mordida na maça

principais métodos http
- get
	- usado para obter a representação de um recurso (singleton ou collection resource
	- get no mesmo recurso resultado é sempre o mesmo pois não gera efeito colateral
	- não pode ser utilizado para modificar um recurso
	- método seguro (safe method) - não modifica recursos
	- é um método indenpotente
- post
	- usado para criar um novo recurso dentro de uma coleção de recursos
	- envia o corpo na requisição (payload)
	- fazendo a requisição no mesmo recurso gera efeito colateral
	- não é idenpotente e não é seguro (modifica recursos)
- put
	- utilizado geralmente para atualizar recursos
	- envia o corpo na requisição os dados a serem atualizados
	- não deve atualizar somente os dados informados no corpo da requisição, mas o recurso completo
	- não pode ser utilizado para uma atualização parcial
	- conceitualmente pode ser utilizado para criar novos recursos (post)
	- idenpotente (resultado é o mesmo da requisição inicial) e não é seguro (modifica recursos)
- patch
	- utilizado para atualização parcial
	- mais complexa que o put (validar as informações que foram informadas, ignorar os demais ...)
	- idenpotente (resultado é o mesmo da requisição inicial) e não é seguro (modifica recursos)
- delete
	- remoção de determinado recurso
	- não passamos e nem recebemos um corpo na requisição
	- idenpotente (resultado é o mesmo da requisição inicial) e não é seguro (modifica recursos)
	- idenpotente? 
		- depois que exlcui a proxima requisição não seria bem sucedida porque o recurso ja foi removido
		- temos que pensar no efeito colateral no estado da aplicação
		- a segunda não altera em nada o estado da aplicação
		- estado da aplicação continua o mesmo a partir da segunda requisição
- head
	- igual ao get mas nao retorna um corpo na resposta
	- usado apenas para buscar um cabelho
	- testar URI ou se aceita um media type
- option 
	- solicitar uma lista de métodos suportada por um recurso
	- cliente consultar quais métodos são disponíveis
	
status http

Respostas de informação (100-199)
Respostas de sucesso (200-299)
	- 200 -> ok
	- 201 -> criado
	- 204 -> sem conteúdo (ex: exclusão)	
Redirecionamentos (300-399)
	- 301 -> movido permanentemente (redirect permatente, deve ter um cabeçalho location com a URI para onde o recurso foi movido) 
	- 302 -> encontrado (endereço existe mas foi alterado temporariamente, também precisa do cabeçalho location, pode continuar usando a URI original)
Erros do cliente (400-499)
	- 400 -> requisição mal feita (servidor não conseguiu entender a mensagem ou erro por parte do client. sintaxe ou validação)
	- 401 -> não autorizado (requer autenticação do cliente)
	- 403 -> proibido (recusou executar a requisição pois o cliente não esta autorizado)
	- 404 -> não encontrado (recurso solicitado não existe)
	- 405 -> método não permitido (verbo http usado na requisição não é suportado pelo recurso)
	- 406 -> não aceito (não pode retornar a representação do recurso com o mediatype informado na requisição)
Erros do servidor (500-599)
	- 500 -> erro interno no servidor (erro no tratamento de exceptions) 
	- 503 -> serviço indisponivel (manutenção ou sobrecarregado)

postman segue automaticamente os redirects, para desabilitar
settings - headers - automatically follow redirects

Status HTTP para collection resource vazia
- 404 (not found) -> não faz sentido porque encontrou o recurso
- 204 (no content) -> também não faz porque retorna uma lista vazia
- 200 (ok) -> seria o correto


